-- Create Table Products :

CREATE TABLE Products
(
    ProductID NUMBER (2) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    ProductName VARCHAR2 (10) NOT NULL ,
    UnitPrice NUMBER (7 , 2) NOT NULL ,
    TotalQuantity NUMBER (3) NOT NULL
);

-- Create Table OrderItem :

CREATE TABLE OrderItem
(
    OrderItemID NUMBER (2) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    ProductID Number (2) ,
    PurchasedQuantity NUMBER (2) NOT NULL ,
    CONSTRAINT OrderItem_ProductID_FK FOREIGN KEY (ProductID) REFERENCES Products (ProductID)
);

-- Create Table Orders :

CREATE TABLE Orders
(
    OrderID NUMBER (4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
    OrderItemID NUMBER (2) , 
    OrderDate DATE ,
    CONSTRAINT Orders_OrderItemID_FK FOREIGN KEY (OrderItemID) REFERENCES OrderItem (OrderItemID)
);

-- Insert Data Into Table Products :

INSERT INTO Products (ProductName , UnitPrice , TotalQuantity) VALUES ('Pepsi' , 30 , 100);

INSERT INTO Products (ProductName , UnitPrice , TotalQuantity) VALUES ('Sprite' , 30 , 100);

INSERT INTO Products (ProductName , UnitPrice , TotalQuantity) VALUES ('Maaza' , 30 , 100);

INSERT INTO Products (ProductName , UnitPrice , TotalQuantity) VALUES ('Limca' , 30 , 100);

-- Insert Data Into Table OrderItem :

INSERT INTO OrderItem (OrderItemID , ProductID , PurchasedQuantity) VALUES (1 , 1 , 6);

INSERT INTO OrderItem (OrderItemID , ProductID , PurchasedQuantity) VALUES (2 , 2 , 6);

INSERT INTO OrderItem (OrderItemID , ProductID , PurchasedQuantity) VALUES (3 , 3 , 6);

-- Insert Data Into Table Orders :

INSERT INTO Orders (OrderID , OrderItemID , OrderDate) VALUES (1001 , 1 , '12-February-2022');

INSERT INTO Orders (OrderID , OrderItemID , OrderDate) VALUES (1002 , 2 , '12-February-2022');

INSERT INTO Orders (OrderID , OrderItemID , OrderDate) VALUES (1003 , 3 , '12-February-2022');

-- Create Order Item Trigger :

CREATE OR REPLACE TRIGGER TriggerOrderItem
    AFTER
    INSERT
    ON 
        OrderItem
    FOR EACH ROW
DECLARE
      VProductID Products.ProductID%TYPE;
      VPurchasedQuantity OrderItem.PurchasedQuantity%TYPE;
BEGIN
      VProductID := : NEW.ProductID;
      VPurchasedQuantity := : NEW.PurchasedQuantity;
    UPDATE 
        Products 
    SET 
        TotalQuantity = TotalQuantity -: NEW.PurchasedQuantity
    WHERE
        ProductID = VProductID;
    INSERT INTO 
        Orders (OrderItemID , OrderDate) VALUES (:NEW.OrderItemID , SYSDATE);
--        OrderItem (ProductID , PurchasedQuantity) VALUES (:new.ProductID , PurchasedQuantity);
END;

-- Create View OrderDetails:

CREATE VIEW VWOrderDetails
AS
    SELECT
        Ord.OrderID , Ord.OrderItemID , Ord.OrderDate , OrdIt.PurchasedQuantity , OrdIt.ProductID , Prod.ProductName 
    FROM
        Orders Ord 
    JOIN
        OrderItem OrdIt
    ON
        Ord.OrderItemID = OrdIt.OrderItemID
    JOIN
        Products Prod
    ON
        Prod.ProductID = OrdIt.ProductID;
        
SELECT * FROM VWOrderDetails;

-- Create Order Trigger :

CREATE OR REPLACE TRIGGER TriggerOrder
    AFTER
    INSERT
    ON 
        VWOrderDetails
    FOR EACH ROW
DECLARE
BEGIN
    UPDATE 
        Products 
    SET 
        TotalQuantity = TotalQuantity -: NEW.PurchasedQuantity
    WHERE
        ProductID = VProductID;
    INSERT INTO 
        OrderItem (ProductID , PurchasedQuantity) VALUES (:NEW.ProductID , PurchasedQuantity);
END;

-- Create Procedure On All The Tables :

CREATE Procedure ProcedureOrderItem (PPurchasedQuantity IN OrdIt.PurchasedQuantity%TYPE , PTotalQuantity OUT Prod.TotalQuantity%TYPE)
AS
BEGIN
    INSERT INTO OrderItem (OrderItemID , ProductID , PurchasedQuantity) VALUES (OrderItemID , ProductID , PurchasedQuantity);
    INSERT INTO Orders (OrderID , OrderItemID , OrderDate) VALUES (OrderID , OrderItemID , OrderDate);
    INSERT INTO Products (ProductName , UnitPrice , TotalQuantity) VALUES (ProductName , UnitPrice , TotalQuantity);
    IF PurchasedQuantity = 0
    THEN
        ROLLBACK
    ELSE
        UPDATE
            Products
        SET 
            PurchasedQuantity = 6
    END IF;   
END;

-- DECLARE
--      PPurchasedQuantity OrderItem.PurchasedQuantity%TYPE;
--      PTotalQuantity Products.TotalQuantity%TYPE;
-- BEGIN 
--    ProcedureOrderItem (PPurchasedQuantity , PTotalQuantity);
-- END;    

-- Create Order Item Trigger :

CREATE OR REPLACE TRIGGER TriggerOrderItems
    AFTER
    INSERT
    ON 
        OrderItem
    FOR EACH ROW
DECLARE
      VProductID Products.ProductID%TYPE;
      VPurchasedQuantity OrderItem.PurchasedQuantity%TYPE;
BEGIN
      VProductID := : NEW.ProductID;
      VPurchasedQuantity := : NEW.PurchasedQuantity;
    UPDATE 
        Products 
    SET 
        TotalQuantity = TotalQuantity -: NEW.PurchasedQuantity
    WHERE
        ProductID = VProductID;
    INSERT INTO 
        Orders (OrderItemID , OrderDate) VALUES (:NEW.OrderItemID , SYSDATE);
    IF PurchasedQuantity = 0
    THEN
        ROLLBACK
    ELSE
        UPDATE
            Products
        SET 
            PurchasedQuantity = 6
    END IF;
END;